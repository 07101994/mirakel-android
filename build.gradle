import java.util.regex.Pattern
/*******************************************************************************
 * Mirakel is an Android App for managing your ToDo-Lists
 *
 *   Copyright (c) 2013-2015 Anatolij Zelenin, Georg Semmler.
 *
 *       This program is free software: you can redistribute it and/or modify
 *       it under the terms of the GNU General Public License as published by
 *       the Free Software Foundation, either version 3 of the License, or
 *       any later version.
 *
 *       This program is distributed in the hope that it will be useful,
 *       but WITHOUT ANY WARRANTY; without even the implied warranty of
 *       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *       GNU General Public License for more details.
 *
 *       You should have received a copy of the GNU General Public License
 *       along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenLocal()
    mavenCentral()
}
buildscript {
    dependencies {
        repositories {
            mavenCentral()
        }
        classpath "com.android.tools.build:gradle:1.2.0"
        //classpath "com.github.jcandksolutions.gradle:android-unit-test:2.1.1"
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'hugo'



def getVersionCode() {
    def manifestFile = file("AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}


android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
    flavorDimensions "stores"
    lintOptions {
        disable 'MissingTranslation','InvalidPackage','ImpliedQuantity','MissingQuantity','RtlHardcoded','RtlCompat', 'RtlEnabled'
        enable 'NewerVersionAvailable', 'InvalidPackage'
    }
    defaultConfig {
        testApplicationId "de.azapps.mirakelandroid.test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        minSdkVersion 14
        targetSdkVersion 21
    }

    def Properties localProps = new Properties()
    localProps.load(new FileInputStream(file('./local.properties')))

    signingConfigs {
        release {
            def Properties keyProps = new Properties()
            assert localProps['keystore.props.file'];
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    jacoco {
        version = "$jacocoVersion"
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-mirakel.txt'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            debuggable true
            testCoverageEnabled = true
        }
    }
    productFlavors {
        google {
            dimension "stores"
            assert localProps['analytics.trackingid'];
            buildConfigField "String", "TRACKER_ID", localProps['analytics.trackingid']
        }
        fdroid {
            dimension "stores"
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['merged-res']
            assets.srcDirs = ['assets']
        }


        google {
            res.srcDirs = ['res-google']
        }
    }
	testOptions {
		unitTests.all {
			forkEvery = 100
			maxParallelForks 2
			maxHeapSize "2048m"
			testLogging {
				events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
			}
			scanForTestClasses = false
			include '**/ModelTestSuite.class'
		}
	}
}

task disableTestFailures << {
    tasks.withType(Test) {
        // disable failing build if tests fails
        ignoreFailures = true
    }
}



apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacocoVersion"
}

project.afterEvaluate {
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName = "${buildTypeName}"
            if (productFlavorName) {
                sourceName = "${productFlavorName}${sourceName.capitalize()}"
            }
            def targetName = "${sourceName.capitalize()}"
            def testTaskName = "test${sourceName.capitalize()}"
            def coverageTaskName = "${testTaskName}Coverage"

            task "$coverageTaskName" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${targetName} build."

                classDirectories = fileTree(
                        dir: "${project.buildDir}/../../",
                        includes: ['*/build/intermediates/classes/**/*.class'],
                        excludes: ['**/R.class',
                                   '**/R$*.class',
                                   '**/*$ViewInjector*.*',
                                   '**/BuildConfig.*',
                                   '**/Manifest*.*',
                                   '**/*Test*.*',
                                   '**/release/**',
                                   '**/google/**']
                )

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java",
                        "../model/src/main/java",
                        "../colorpickerpreference/src",
                        "../colorpicker/src",
                        "../date-time-picker/src",
                        "../donationslib/src",
                        "../helper/src/main/java",
                        "../ilovefs-android/src",
                        "../material-elements/src/main/java",
                        "../settings/src",
                        "../tw_sync/src",
                        "../widget/src"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
                doLast {
                    println "See report at: file://${project.buildDir.toURI().path}/reports/jacoco/${coverageTaskName}/html/index.html"
                }
            }
        }
    }
}

clean.doFirst {
    delete "${project.buildDir}/../jacoco.exec"
}


ext {
    flavor = ""
}

gradle.startParameter.getTaskNames().each { task ->
    if(task.contains("Google") || task.contains("google")){
        flavor = "google"
    }
}

dependencies {
    compile project(':model')
    compile project(':helper')
    compile project(':widget')
    compile project(':tw_sync')
    compile project(':settings')
    compile project(':ilovefs-android')
    compile project(':date-time-picker')
    compile project(':colorpicker')
    compile "ch.acra:acra:$acraVersion"
    compile "com.jakewharton:butterknife:$butterknifeVersion"

    //for tests
    testCompile "junit:junit:4.11"
    testCompile "org.assertj:assertj-core:1.7.0"
    testCompile "org.robolectric:robolectric:3.0"

    googleCompile 'com.google.android.gms:play-services-analytics:7.5.0'

}

task deploy(dependsOn: build) << {
    println "Do you realy want to deploy Mirakel?"
    def c=System.console().readLine().toLowerCase();
    if ( c== 'y'||c=='j'){
        def script = (rootDir.toString()+"/build/scripts/deploy.sh").execute()
        script.err.eachLine {line -> println "ERROR: " + line}
        script.out.each {line -> println line}
        script.waitFor()
    }
}

apply plugin: 'idea'
idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}
