apply plugin: 'com.android.application'
//apply plugin: 'hugo'
apply plugin: 'robolectric'

def getVersionCode() {
    def manifestFile = file("AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
    flavorDimensions "stores"
    lintOptions {
        disable 'MissingTranslation','AppCompatResource'
        enable 'NewerVersionAvailable'
    }
    defaultConfig {
        testApplicationId "de.azapps.mirakelandroid.test"
        //testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
        minSdkVersion 14
        targetSdkVersion 21
    }
    signingConfigs {
        release {
            def Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('./local.properties')))
            def Properties keyProps = new Properties()
            assert localProps['keystore.props.file'];
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFile 'proguard-android.txt'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    productFlavors {
        google {
            flavorDimension "stores"
        }
        fdroid {
            flavorDimension "stores"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['merged-res']
            assets.srcDirs = ['assets']
        }

        androidTest {
            java.srcDirs = ['tests/src']
        }
        instrumentTest.setRoot('tests/src')

        google {
            manifest.srcFile  "res-google/AndroidManifest.xml"
            res.srcDirs = ['res-google']
        }
    }
}


robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    //exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    //maxHeapSize = '2048m'

    // configure the test JVM arguments
    //jvmArgs '-Xmx1024m', '-XX:MaxPermSize=256m', '-XX:+HeapDumpOnOutOfMemoryError'

    // configure whether failing tests should fail the build
    //ignoreFailures false

    // use afterTest to listen to the test execution results
    afterTest { descriptor, result ->
        println "Executing test for {$descriptor.name} with result: ${result.resultType}"
    }
}

dependencies {
    compile project(':model')
    compile project(':helper')
    compile project(':widget')
    compile project(':tw_sync')
    compile project(':changelog')
    compile project(':settings')
    compile project(':ilovefs-android')
    compile project(':custom_views')
    compile project(':acra')
    compile project(':drag-sort-listview')
    compile project(':main')
    compile "com.jakewharton:butterknife:$butterknifeVersion"

    compile "com.android.support:cardview-v7:$androidSupportVersion"
    compile "com.android.support:recyclerview-v7:$androidSupportVersion"

    //for tests
    //androidTestCompile files("$project.buildDir/classes/debug")
    //androidTestCompile "com.jayway.android.robotium:robotium-solo:$robotiumVersion"
    //androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    //androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    //androidTestCompile 'org.hamcrest:hamcrest-library:1.1'

    //androidTestCompile("junit:junit:4.11"){
//        exclude module: 'hamcrest-core'
    //  }

    //androidTestCompile("org.robolectric:robolectric:2.3") {
    //	exclude module: 'classworlds'
    //	exclude module: 'commons-logging'
    //	exclude module: 'httpclient'
    //	exclude module: 'maven-artifact'
    //	exclude module: 'maven-artifact-manager'
    //	exclude module: 'maven-error-diagnostics'
    //	exclude module: 'maven-model'
    //	exclude module: 'maven-project'
    //	exclude module: 'maven-settings'
    //	exclude module: 'plexus-container-default'
    //	exclude module: 'plexus-interpolation'
    //	exclude module: 'plexus-utils'
    //	exclude module: 'wagon-file'
    //	exclude module: 'wagon-http-lightweight'
    //	exclude module: 'wagon-provider-api'
    //}
}

task deploy(dependsOn: build) << {
    println "Do you realy want to deploy Mirakel?"
    def c=System.console().readLine().toLowerCase();
    if ( c== 'y'||c=='j'){
        def script = (rootDir.toString()+"/build/scripts/deploy.sh").execute()
        script.err.eachLine {line -> println "ERROR: " + line}
        script.out.each {line -> println line}
        script.waitFor()
    }
}

apply plugin: 'idea'
idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}
