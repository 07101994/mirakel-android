/*******************************************************************************
 * Mirakel is an Android App for managing your ToDo-Lists
 *
 *   Copyright (c) 2013-2015 Anatolij Zelenin, Georg Semmler.
 *
 *       This program is free software: you can redistribute it and/or modify
 *       it under the terms of the GNU General Public License as published by
 *       the Free Software Foundation, either version 3 of the License, or
 *       any later version.
 *
 *       This program is distributed in the hope that it will be useful,
 *       but WITHOUT ANY WARRANTY; without even the implied warranty of
 *       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *       GNU General Public License for more details.
 *
 *       You should have received a copy of the GNU General Public License
 *       along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/

def getVersionCode() {
	def manifestFile = file("AndroidManifest.xml")
	def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
	def manifestText = manifestFile.getText()
	def matcher = pattern.matcher(manifestText)
	matcher.find()
	return Integer.parseInt(matcher.group(1))
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    packagingOptions {
	    exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE.txt'
    }
    flavorDimensions "stores"
    lintOptions {
        disable 'MissingTranslation','AppCompatResource'
        enable 'NewerVersionAvailable'
    }
    defaultConfig {
        testApplicationId "de.azapps.mirakelandroid.test"
        //testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
        minSdkVersion 14
        targetSdkVersion 22
    }
    signingConfigs {
    	release {
            def Properties localProps = new Properties()
            localProps.load(new FileInputStream(file('./local.properties')))
            def Properties keyProps = new Properties()
            assert localProps['keystore.props.file'];
            keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
    	}
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFile 'proguard-android.txt'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }
    productFlavors {
        google {
            flavorDimension "stores"
        }
        fdroid {
            flavorDimension "stores"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['merged-res']
            assets.srcDirs = ['assets']
        }

    }
}

dependencies {
    compile project(':model')
    compile project(':helper')
    compile project(':widget')
    compile project(':tw_sync')
    compile project(':changelog')
    compile project(':settings')
    compile project(':ilovefs-android')
    compile project(':custom_views')
    compile project(':acra')
    compile project(':drag-sort-listview')
    compile project(':new_ui')

    //for tests
    //androidTestCompile files("$project.buildDir/classes/debug")
    //androidTestCompile "com.jayway.android.robotium:robotium-solo:$robotiumVersion"
    //androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    //androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    //androidTestCompile 'org.hamcrest:hamcrest-library:1.1'

	//androidTestCompile("junit:junit:4.11"){
//        exclude module: 'hamcrest-core'
  //  }

	//androidTestCompile("org.robolectric:robolectric:2.3") {
	//	exclude module: 'classworlds'
	//	exclude module: 'commons-logging'
	//	exclude module: 'httpclient'
	//	exclude module: 'maven-artifact'
	//	exclude module: 'maven-artifact-manager'
	//	exclude module: 'maven-error-diagnostics'
	//	exclude module: 'maven-model'
	//	exclude module: 'maven-project'
	//	exclude module: 'maven-settings'
	//	exclude module: 'plexus-container-default'
	//	exclude module: 'plexus-interpolation'
	//	exclude module: 'plexus-utils'
	//	exclude module: 'wagon-file'
	//	exclude module: 'wagon-http-lightweight'
	//	exclude module: 'wagon-provider-api'
	//}
}

task deploy(dependsOn: build) << {
	println "Do you realy want to deploy Mirakel?"
	def c=System.console().readLine().toLowerCase();
	if ( c== 'y'||c=='j'){
		def script = (rootDir.toString()+"/build/scripts/deploy.sh").execute()
		script.err.eachLine {line -> println "ERROR: " + line}
		script.out.each {line -> println line}
	    script.waitFor()
	}
}

apply plugin: 'idea'
idea {
	module {
		testOutputDir = file('build/test-classes/debug')
	}
}
